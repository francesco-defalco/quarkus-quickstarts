## Stage 1 : build with maven builder image with native capabilities
FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 AS build

COPY --chown=quarkus:quarkus mvnw /code/mvnw
COPY --chown=quarkus:quarkus .mvn /code/.mvn
COPY --chown=quarkus:quarkus pom.xml /code/

USER quarkus

WORKDIR /code
RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline

COPY src/ /code/src
RUN ./mvnw package -Dnative

## Stage 2 : create the docker final image
FROM quay.io/quarkus/quarkus-micro-image:2.0 as final
WORKDIR /work/
COPY --from=build /code/target/*-runner /work/application

# set up permissions for user `1001`
RUN chmod 775 /work /work/application \
  && chown -R 1001 /work \
  && chmod -R "g+rwX" /work \
  && chown -R 1001:root /work

EXPOSE 8080
USER 1001

CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]

FROM build as debug

# Expose the debug port
EXPOSE 5005:5005
EXPOSE 8080:8080

# Set the Java options to enable remote debugging
#ENV JAVA_OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005"

ENTRYPOINT [ "./mvnw", "quarkus:dev", "-Ddebug", "-Dsuspend"]

FROM build as remote-debug
#ENV WLP_DEBUG_REMOTE=true

RUN ./mvnw clean package -Dquarkus.package.type=mutable-jar
EXPOSE 5005:5005
EXPOSE 8080:8080

#RUN ./mvnw quarkus:dev -Dsuspend -Ddebug
COPY --from=build /code/target/*-runner /work/application
ENTRYPOINT ["./application", "-Dquarkus.http.host=0.0.0.0"]


#RUN ./mvnw quarkus:remote-dev -Ddebug=false -Dquarkus.live-reload.url=http://localhost:8080 -Dquarkus.live-reload.password=123 -Dquarkus.package.type=mutable-jar

#CMD ["./application", "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005", "-Dquarkus.live-reload.password=123 -Dquarkus.http.host=0.0.0.0", " /code/quarkus-run.jar"]
